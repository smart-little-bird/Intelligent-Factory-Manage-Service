// <auto-generated />
using Intelligent.Factory.Management.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Intelligent.Factory.Management.API.Migrations
{
    [DbContext(typeof(IntelligentFactoryManagementContext))]
    partial class IntelligentFactoryManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Intelligent.Factory.Management.Domain.AggregatesModel.ClientAggregate.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BillingTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientAgentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TFN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientAgentId");

                    b.ToTable("client", "IntelligentFactoryManagement");
                });

            modelBuilder.Entity("Intelligent.Factory.Management.Domain.AggregatesModel.ClientAggregate.ClientAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientAgent");
                });

            modelBuilder.Entity("Intelligent.Factory.Management.Domain.AggregatesModel.ClientAggregate.Client", b =>
                {
                    b.HasOne("Intelligent.Factory.Management.Domain.AggregatesModel.ClientAggregate.ClientAgent", "ClientAgent")
                        .WithMany()
                        .HasForeignKey("ClientAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Intelligent.Factory.Management.Domain.AggregatesModel.ClientAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Province");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("ClientId");

                            b1.ToTable("client", "IntelligentFactoryManagement");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Intelligent.Factory.Management.Domain.AggregatesModel.ClientAggregate.Bank", "Bank", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<string>("BankAccount")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BankAccount");

                            b1.Property<string>("BankTitle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BankTitle");

                            b1.HasKey("ClientId");

                            b1.ToTable("client", "IntelligentFactoryManagement");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Bank")
                        .IsRequired();

                    b.Navigation("ClientAgent");
                });
#pragma warning restore 612, 618
        }
    }
}
